/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,20],$V2=[1,21],$V3=[1,29],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,31],$Va=[1,35],$Vb=[1,34],$Vc=[1,33],$Vd=[1,10],$Ve=[1,36],$Vf=[1,32],$Vg=[1,37],$Vh=[1,8],$Vi=[1,38],$Vj=[2,5,23,25,32,38,39,40,41,42,66,71,77,78,80,83,84,86,87,90],$Vk=[2,5,23,25,32,38,39,40,41,42,66,68,71,74,76,77,78,80,83,84,86,87,90],$Vl=[1,54],$Vm=[1,55],$Vn=[1,53],$Vo=[1,74],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,76],$Vy=[24,30],$Vz=[2,33],$VA=[1,80],$VB=[1,82],$VC=[2,25],$VD=[24,30,65],$VE=[1,94],$VF=[1,103],$VG=[1,102],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[24,30,43,45,46,47,48,49,50,51,52,53,54,55,56,57,65,75],$VU=[86,87],$VV=[1,122],$VW=[30,65],$VX=[23,25,32,38,39,40,41,42,66,68,71,74,76,77,78,83,84,86,90],$VY=[1,144],$VZ=[1,143],$V_=[2,15,38,39,40,41,42,68,80],$V$=[24,30,43,45,50,51,52,53,54,55,56,57,65,75],$V01=[24,30,43,45,46,47,50,51,52,53,54,55,56,57,65,75],$V11=[24,30,50,51,65,75],$V21=[24,30,50,51,52,53,65,75],$V31=[24,30,50,51,52,53,54,55,56,57,65,75],$V41=[1,183],$V51=[1,189],$V61=[1,190],$V71=[1,197],$V81=[68,74,76],$V91=[2,5,15,23,25,32,38,39,40,41,42,66,68,71,77,78,80,83,84,86,87,90],$Va1=[2,69],$Vb1=[1,206],$Vc1=[2,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"InstruccionesFueraClase":4,"EOF":5,"Instruccion_OutsideClass":6,"InstruccionesDentroClase":7,"Instruccion_InsideClass":8,"InstruccionesMetodo_Funciones":9,"Instruccion_Functions":10,"Import":11,"Class":12,"FuncionMetodo":13,"Declaracion":14,"Clase":15,"Asignacion":16,"If":17,"For":18,"While":19,"Do":20,"Switch":21,"Imprimir":22,"BREAK":23,"PUNTO_COMA":24,"CONTINUE":25,"Return":26,"LlamarFuncion":27,"Tipo_Dato":28,"Declaracion1":29,"COMA":30,"Declaracion2":31,"IDENTIFICADOR":32,"IGUAL":33,"Expresion":34,"Aumento":35,"INCREMENTO":36,"DECREMENTO":37,"INT":38,"CHAR":39,"DOUBLE":40,"BOOLEAN":41,"STRING":42,"RESTA":43,"NOT":44,"SUMA":45,"MULTIPLICACION":46,"DIVISION":47,"MODULO":48,"POTENCIA":49,"AND":50,"OR":51,"DOBLE_IGUAL":52,"DIFERENTEA":53,"MENOR_IGUAL":54,"MENOR":55,"MAYOR_IGUAL":56,"MAYOR":57,"DECIMAL":58,"NUMERO":59,"TRUE":60,"FALSE":61,"CADENA":62,"CARACTER":63,"PARENTESIS_APERTURA":64,"PARENTESIS_CIERRE":65,"IF":66,"LLAVE_APERTURA":67,"LLAVE_CIERRE":68,"OptionalElse":69,"ELSE":70,"SWITCH":71,"Lista_Case":72,"Case":73,"CASE":74,"DOS_PUNTOS":75,"DEFAULT":76,"DO":77,"WHILE":78,"FuncionPrima":79,"VOID":80,"MAIN":81,"Parametros":82,"IMPRIMIR":83,"FOR":84,"ListaAumentoFor":85,"CLASS":86,"IMPORT":87,"Lista_Exp":88,"Expresiones":89,"RETURN":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"Clase",23:"BREAK",24:"PUNTO_COMA",25:"CONTINUE",30:"COMA",32:"IDENTIFICADOR",33:"IGUAL",36:"INCREMENTO",37:"DECREMENTO",38:"INT",39:"CHAR",40:"DOUBLE",41:"BOOLEAN",42:"STRING",43:"RESTA",44:"NOT",45:"SUMA",46:"MULTIPLICACION",47:"DIVISION",48:"MODULO",49:"POTENCIA",50:"AND",51:"OR",52:"DOBLE_IGUAL",53:"DIFERENTEA",54:"MENOR_IGUAL",55:"MENOR",56:"MAYOR_IGUAL",57:"MAYOR",58:"DECIMAL",59:"NUMERO",60:"TRUE",61:"FALSE",62:"CADENA",63:"CARACTER",64:"PARENTESIS_APERTURA",65:"PARENTESIS_CIERRE",66:"IF",67:"LLAVE_APERTURA",68:"LLAVE_CIERRE",70:"ELSE",71:"SWITCH",74:"CASE",75:"DOS_PUNTOS",76:"DEFAULT",77:"DO",78:"WHILE",80:"VOID",81:"MAIN",83:"IMPRIMIR",84:"FOR",86:"CLASS",87:"IMPORT",90:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[6,2],[6,1],[6,1],[6,1],[8,1],[8,1],[8,1],[8,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,2],[10,1],[10,2],[14,3],[29,3],[29,1],[31,3],[31,1],[16,4],[16,2],[35,2],[35,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[17,8],[69,0],[69,4],[69,9],[21,7],[72,2],[72,1],[73,6],[73,3],[20,9],[19,7],[13,7],[13,7],[13,7],[79,2],[79,1],[82,4],[82,2],[22,5],[18,10],[18,11],[85,3],[85,1],[12,5],[11,4],[11,3],[27,3],[88,2],[88,1],[89,3],[89,1],[26,3],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2: case 4: case 6:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 7:
 this.$ = [$$[$0]]; 
break;
case 11: case 15:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 29:
this.$ = instruccionesAPI.newDeclaration($$[$0-2],$$[$0-1]); 
break;
case 34:
this.$ = instruccionesAPI.newAsignament($$[$0-3],$$[$0-1]); 
break;
case 45:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 46:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 47:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 48:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 50:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 51:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 52:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 53:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 54:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTEA); 
break;
case 55:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 56:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 57:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 58:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 59:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.NUMERO); 
break;
case 60:
 this.$ = instruccionesAPI.newValue(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 61:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.TRUE); 
break;
case 62:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.FALSE); 
break;
case 63:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.CADENA); 
break;
case 64:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.CARACTER); 
break;
case 65: case 66:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 78:
 this.$ = instruccionesAPI.newWhile($$[$0-4], $$[$0-1]); 
break;
case 79: case 81:
this.$ = instruccionesAPI.newFunction($$[$0-6], $$[$0-5], $$[$0-1] ); 
break;
case 80:
this.$ = instruccionesAPI.newFunction($$[$0-6], $$[$0-5], $$[$0-1]); 
break;
case 91:
 this.$ = instruccionesAPI.newClass($$[$0-3], $$[$0-1]); 
break;
case 92: case 93:
 this.$ = instruccionesAPI.newImport($$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:6,11:4,12:19,13:5,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:9,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,80:$Vd,83:$Ve,84:$Vf,86:$Vg,87:$Vh,90:$Vi},{1:[3]},{2:$V0,5:[1,39],6:40,10:6,11:4,12:19,13:5,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:9,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,80:$Vd,83:$Ve,84:$Vf,86:$Vg,87:$Vh,90:$Vi},o($Vj,[2,3]),{12:41,86:$Vg,87:[1,42]},o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),{32:[1,43]},{29:45,31:46,32:[1,44]},{32:[1,47],81:[1,48]},o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),{24:[1,49]},{24:[1,50]},o($Vk,[2,27]),{24:[1,51]},{32:[2,38]},{32:[2,39]},{32:[2,40]},{32:[2,41]},{32:[2,42]},{33:[1,52],36:$Vl,37:$Vm,64:$Vn},{24:[1,56]},{64:[1,57]},{64:[1,58]},{64:[1,59]},{67:[1,60]},{64:[1,61]},{64:[1,62]},{32:[1,63]},{24:[1,65],27:75,32:$Vo,34:64,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,8]),{32:[1,77]},{24:[1,78]},o($Vy,$Vz,{33:$VA,64:[1,79]}),{24:[1,81],30:$VB},o($Vy,[2,31]),{64:[1,83]},{64:[1,84]},o($Vk,$VC),o($Vk,[2,26]),o($Vk,[2,28]),{27:75,32:$Vo,34:85,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:89,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:[1,88],88:86,89:87},o($VD,[2,36]),o($VD,[2,37]),o($Vk,[2,35]),{27:75,32:$Vo,34:90,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{14:91,28:93,29:92,31:46,32:$VE,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{27:75,32:$Vo,34:95,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{9:96,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{27:75,32:$Vo,34:98,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:99,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{67:[1,100]},{24:[1,101],43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS},o($Vk,[2,100]),{27:75,32:$Vo,34:116,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:117,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,65],{64:$Vn}),o($VT,[2,66]),{27:75,32:$Vo,34:118,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{24:[1,119]},o($VU,[2,93]),{28:123,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,65:$VV,79:120,82:121},{27:75,32:$Vo,34:124,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},o([2,5,15,23,25,32,38,39,40,41,42,43,44,58,59,60,61,62,63,64,66,68,71,74,76,77,78,80,83,84,86,87,90],[2,29]),{31:125,32:$VE},{28:123,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,65:$VV,79:126,82:121},{65:[1,127]},{24:[1,128],43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS},o($VT,[2,94]),{30:[1,130],65:[1,129]},o($VT,[2,96]),o($VW,[2,98],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS}),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,131]},{27:75,32:$Vo,34:132,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{24:[1,133],30:$VB},{29:45,31:46,32:$VE},o($Vy,$Vz,{33:$VA}),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,134]},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,135],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($VX,[2,7]),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,137]},{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,138]},{2:$VY,7:139,8:140,13:142,14:141,15:$VZ,28:9,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,80:$Vd},o($Vk,[2,99]),{27:75,32:$Vo,34:145,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:146,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:147,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:148,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:149,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:150,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:151,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:152,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:153,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:154,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:155,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:156,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:157,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{27:75,32:$Vo,34:158,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},o($VT,[2,43]),o($VT,[2,44]),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,159]},o($VU,[2,92]),{67:[1,160]},{30:[1,162],65:[1,161]},{67:[2,83]},{32:[1,163]},o($Vy,[2,32],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS}),o($Vy,[2,30]),{67:[1,164]},{67:[1,165]},o($Vk,[2,34]),o($VT,[2,95]),{27:75,32:$Vo,34:166,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{67:[1,167]},{24:[1,168],43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS},{27:75,32:$Vo,34:169,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{67:[1,170]},{78:[1,171]},o($VX,[2,6]),{67:[1,172]},{24:[1,173]},{2:$VY,8:175,13:142,14:141,15:$VZ,28:9,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,68:[1,174],80:$Vd},o($V_,[2,5]),o($V_,[2,12]),o($V_,[2,13]),o($V_,[2,14]),o($V_,[2,15]),o($V$,[2,45],{46:$VH,47:$VI,48:$VJ,49:$VK}),o($V$,[2,46],{46:$VH,47:$VI,48:$VJ,49:$VK}),o($V01,[2,47],{48:$VJ,49:$VK}),o($V01,[2,48],{48:$VJ,49:$VK}),o($VT,[2,49]),o($VT,[2,50]),o($V11,[2,51],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS}),o($V11,[2,52],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS}),o($V21,[2,53],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,54:$VP,55:$VQ,56:$VR,57:$VS}),o($V21,[2,54],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,54:$VP,55:$VQ,56:$VR,57:$VS}),o($V31,[2,55],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V31,[2,56],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V31,[2,57],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($V31,[2,58],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),o($VT,[2,67]),{9:176,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{67:[2,82]},{28:177,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},o($VW,[2,85]),{9:178,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{9:179,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($VW,[2,97],{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS}),{9:180,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{32:$V41,35:182,85:181},{24:[1,184],43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS},{9:185,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{64:[1,186]},{72:187,73:188,74:$V51,76:$V61},o($Vk,[2,86]),o($Vk,[2,91]),o($V_,[2,4]),{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,191],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{32:[1,192]},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,193],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,194],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,195],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{30:$V71,65:[1,196]},o($VW,[2,90]),{36:$Vl,37:$Vm},{32:$V41,35:182,85:198},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,199],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{27:75,32:$Vo,34:200,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{68:[1,201],73:202,74:$V51,76:$V61},o($V81,[2,74]),{27:75,32:$Vo,34:203,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},{75:[1,204]},o($V91,[2,79]),o($VW,[2,84]),o($V91,[2,80]),o($V91,[2,81]),o($Vk,$Va1,{69:205,70:$Vb1}),{67:[1,207]},{32:$V41,35:208},{30:$V71,65:[1,209]},o($Vk,[2,78]),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,210]},o($Vk,[2,72]),o($V81,[2,73]),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,75:[1,211]},{9:212,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($Vk,[2,68]),{66:[1,214],67:[1,213]},{9:215,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($VW,[2,89]),{67:[1,216]},{24:[1,217]},{9:218,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($V81,[2,76],{14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,12:19,26:22,27:23,35:30,28:93,10:136,23:$V1,25:$V2,32:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi}),{9:219,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{64:[1,220]},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,221],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{9:222,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($Vk,[2,77]),{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:[1,223],25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,224],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{27:75,32:$Vo,34:225,43:$Vp,44:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx},o($Vk,[2,87]),{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,226],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{24:[1,227]},o($Vk,[2,70]),{43:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,57:$VS,65:[1,228]},o($Vk,[2,88]),o([23,25,32,38,39,40,41,42,66,71,77,78,83,84,86,90],$VC,{68:$Vc1,74:$Vc1,76:$Vc1}),{67:[1,229]},{9:230,10:97,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},{10:136,12:19,14:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,25:$V2,26:22,27:23,28:93,32:$V3,35:30,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,66:$V9,68:[1,231],71:$Va,77:$Vb,78:$Vc,83:$Ve,84:$Vf,86:$Vg,90:$Vi},o($Vk,$Va1,{69:232,70:$Vb1}),o($Vk,[2,71])],
defaultActions: {24:[2,38],25:[2,39],26:[2,40],27:[2,41],28:[2,42],39:[2,1],122:[2,83],161:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./instrucciones').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 38;
break;
case 4:return 39;
break;
case 5:return 42;
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 24;   
break;
case 9:return 30;      
break;
case 10:return 75;  
break;
case 11:return 36;        
break;
case 12:return 37; 
break;
case 13:return 56;        
break;
case 14:return 54;
break;
case 15:return 57;             
break;
case 16:return 55; 
break;
case 17:return 53;   
break;
case 18:return 52;   
break;
case 19:return 44;
break;
case 20:return 33;   
break;
case 21:return 51;           
break;
case 22:return 50;     
break;
case 23:return 45;
break;
case 24:return 43;  
break;
case 25:return 47;      
break;
case 26:return 46;
break;
case 27:return 49;
break;
case 28:return 48;
break;
case 29:return 64;
break;
case 30:return 65; 
break;
case 31:return 67;     
break;
case 32:return 68;
break;
case 33:return 60;
break;
case 34:return 61;
break;
case 35:return 86;
break;
case 36:return 87;
break;
case 37:return 25;
break;
case 38:return 80;
break;
case 39:return 90;
break;
case 40:return 81;
break;
case 41:return 66;
break;
case 42:return 70;
break;
case 43:return 78;
break;
case 44:return 77;
break;
case 45:return 84;
break;
case 46:return 71;
break;
case 47:return 74;
break;
case 48:return 76;
break;
case 49:return 23;
break;
case 50:return "IMPRIMIR";
break;
case 51:return "IMPRIMIR";
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 54:return 58;
break;
case 55:return 'ENTERO';
break;
case 56:return 32;
break;
case 57:return 5;
break;
case 58: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:false\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}