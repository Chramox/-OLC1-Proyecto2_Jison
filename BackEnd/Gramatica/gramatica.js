/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[6,9],$V3=[9,90],$V4=[1,27],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,30],$Vb=[2,6,9,10,13,29,31,43,44,45,46,47,71,76,79,81,82,83,87,88,92],$Vc=[2,13,21,43,44,45,46,47,85],$Vd=[1,44],$Ve=[30,36],$Vf=[2,38],$Vg=[1,46],$Vh=[1,50],$Vi=[1,63],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,65],$Vs=[1,70],$Vt=[1,72],$Vu=[1,75],$Vv=[1,74],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[30,36,48,50,51,52,53,54,55,56,57,58,59,60,61,62,70,80],$VJ=[1,90],$VK=[1,115],$VL=[1,109],$VM=[1,110],$VN=[1,117],$VO=[1,121],$VP=[1,120],$VQ=[1,119],$VR=[1,122],$VS=[1,118],$VT=[1,123],$VU=[36,70],$VV=[2,9,10,13,21,29,31,43,44,45,46,47,71,74,76,79,81,82,83,85,87,88,92],$VW=[2,9,10,13,29,31,43,44,45,46,47,71,76,79,81,82,83,87,88,92],$VX=[1,150],$VY=[1,151],$VZ=[30,36,48,50,55,56,57,58,59,60,61,62,70,80],$V_=[30,36,48,50,51,52,55,56,57,58,59,60,61,62,70,80],$V$=[30,36,55,56,70,80],$V01=[30,36,55,56,57,58,70,80],$V11=[30,36,55,56,57,58,59,60,61,62,70,80],$V21=[30,36,70],$V31=[1,190],$V41=[1,194],$V51=[1,199],$V61=[1,200],$V71=[2,9,10,13,29,31,43,44,45,46,47,71,74,76,79,81,82,83,87,88,92],$V81=[1,206],$V91=[13,79,81],$Va1=[1,219];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Imports":4,"ClassINIT":5,"EOF":6,"Error":7,"Class":8,"CLASS":9,"IDENTIFICADOR":10,"LLAVE_APERTURA":11,"InstruccionesDentroClase":12,"LLAVE_CIERRE":13,"Instruccion_InsideClass":14,"BLOQUE_INS":15,"BLOQUE_INS_PRIMA":16,"Instruccion_Functions":17,"BloqueCASES":18,"Declaracion":19,"FuncionMetodo":20,"Clase":21,"Asignacion":22,"If":23,"For":24,"While":25,"Do":26,"Switch":27,"Imprimir":28,"BREAK":29,"PUNTO_COMA":30,"CONTINUE":31,"Return":32,"LlamarFuncion":33,"Tipo_Dato":34,"Declaracion1":35,"COMA":36,"Declaracion2":37,"IGUAL":38,"Expresion":39,"Aumento":40,"INCREMENTO":41,"DECREMENTO":42,"INT":43,"CHAR":44,"DOUBLE":45,"BOOLEAN":46,"STRING":47,"RESTA":48,"NOT":49,"SUMA":50,"MULTIPLICACION":51,"DIVISION":52,"MODULO":53,"POTENCIA":54,"AND":55,"OR":56,"DOBLE_IGUAL":57,"DIFERENTEA":58,"MENOR_IGUAL":59,"MENOR":60,"MAYOR_IGUAL":61,"MAYOR":62,"DECIMAL":63,"NUMERO":64,"TRUE":65,"FALSE":66,"CADENA":67,"CARACTER":68,"PARENTESIS_APERTURA":69,"PARENTESIS_CIERRE":70,"IF":71,"Else":72,"ListELSEIF":73,"ELSE":74,"Elseif":75,"SWITCH":76,"Lista_Case":77,"Case":78,"CASE":79,"DOS_PUNTOS":80,"DEFAULT":81,"DO":82,"WHILE":83,"Parametros":84,"VOID":85,"MAIN":86,"IMPRIMIR":87,"FOR":88,"ListaAumentoFor":89,"IMPORT":90,"Expresiones":91,"RETURN":92,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"CLASS",10:"IDENTIFICADOR",11:"LLAVE_APERTURA",13:"LLAVE_CIERRE",21:"Clase",29:"BREAK",30:"PUNTO_COMA",31:"CONTINUE",36:"COMA",38:"IGUAL",41:"INCREMENTO",42:"DECREMENTO",43:"INT",44:"CHAR",45:"DOUBLE",46:"BOOLEAN",47:"STRING",48:"RESTA",49:"NOT",50:"SUMA",51:"MULTIPLICACION",52:"DIVISION",53:"MODULO",54:"POTENCIA",55:"AND",56:"OR",57:"DOBLE_IGUAL",58:"DIFERENTEA",59:"MENOR_IGUAL",60:"MENOR",61:"MAYOR_IGUAL",62:"MAYOR",63:"DECIMAL",64:"NUMERO",65:"TRUE",66:"FALSE",67:"CADENA",68:"CARACTER",69:"PARENTESIS_APERTURA",70:"PARENTESIS_CIERRE",71:"IF",74:"ELSE",76:"SWITCH",79:"CASE",80:"DOS_PUNTOS",81:"DEFAULT",82:"DO",83:"WHILE",85:"VOID",86:"MAIN",87:"IMPRIMIR",88:"FOR",90:"IMPORT",92:"RETURN"},
productions_: [0,[3,3],[3,3],[3,2],[5,1],[5,2],[8,5],[8,4],[12,2],[12,1],[15,3],[15,2],[16,2],[16,1],[18,3],[18,1],[14,1],[14,1],[14,1],[14,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,2],[17,2],[17,1],[17,2],[17,1],[19,3],[35,3],[35,1],[37,3],[37,1],[22,4],[22,2],[40,2],[40,2],[34,1],[34,1],[34,1],[34,1],[34,1],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,3],[23,5],[23,6],[23,6],[23,7],[72,2],[73,2],[73,1],[75,6],[27,7],[77,2],[77,1],[78,4],[78,3],[26,7],[25,5],[20,6],[20,5],[20,6],[20,5],[20,5],[84,4],[84,2],[28,5],[24,8],[24,9],[89,3],[89,1],[4,4],[4,3],[33,4],[33,3],[91,3],[91,1],[32,3],[32,2],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return {
            AST: instruccionesAPI.instructionsINIT($$[$0-2],$$[$0-1]), 
            ListaErrores: instruccionesAPI.getListaErrores()};
break;
case 2:
 return {
            AST: instruccionesAPI.instructionsINIT(undefined,$$[$0-2]),
            ListaErrores: instruccionesAPI.getListaErrores()
        };
break;
case 3:
 return {
            AST: instruccionesAPI.instructionsINIT(undefined,$$[$0-1]),
            ListaErrores: instruccionesAPI.getListaErrores()
        };
break;
case 4: case 9: case 13: case 79: case 83: case 99: case 105:
 this.$ = [$$[$0]] 
break;
case 5: case 8: case 12: case 78: case 82:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 6:
 this.$ = instruccionesAPI.instructionClass($$[$0-3],$$[$0-1]) 
break;
case 7:
 this.$ = instruccionesAPI.instructionClass($$[$0-2],undefined) 
break;
case 10:
this.$ = $$[$0-1]
break;
case 29:
 this.$ = instruccionesAPI.instructionBreak() 
break;
case 30:
 this.$ = instruccionesAPI.instructionContinue() 
break;
case 34:
 this.$ = instruccionesAPI.declaration0($$[$0-2],$$[$0-1]) 
break;
case 35:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 36:
this.$ = [$$[$0]]
break;
case 37:
 this.$ = instruccionesAPI.instructionDeclaration($$[$0-2],$$[$0-1],$$[$0]) 
break;
case 38:
 this.$ = instruccionesAPI.instructionDeclaration($$[$0],undefined,undefined) 
break;
case 39:
this.$ = instruccionesAPI.instructionAsign($$[$0-3],$$[$0-2])
break;
case 41: case 42:
 this.$ = instruccionesAPI.instructionPlusMenus1($$[$0-1],$$[$0]) 
break;
case 49:
this.$ = instruccionesAPI.OperacionBinaria($$[$0],undefined,"!")
break;
case 50:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"+")
break;
case 51:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"-")
break;
case 52:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"*")
break;
case 53:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"/")
break;
case 54:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"%")
break;
case 55:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"^")
break;
case 56:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"&&")
break;
case 57:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"||")
break;
case 58:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"==")
break;
case 59:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"!=")
break;
case 60:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"<=")
break;
case 61:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],"<")
break;
case 62:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],">=")
break;
case 63:
this.$ = instruccionesAPI.OperacionBinaria($$[$0-2],$$[$0],">")
break;
case 64:
this.$ = {NUMERO_DEC:$$[$0]}
break;
case 65:
this.$ = {NUMERO:$$[$0]}
break;
case 66: case 67:
this.$ = {LOGICO:$$[$0]}
break;
case 68:
this.$ = {CADENA:$$[$0]}
break;
case 69:
this.$ = {CARACTER:$$[$0]}
break;
case 70:
this.$ = {ID:$$[$0]}
break;
case 73:
 this.$ = instruccionesAPI.newIf( $$[$0-2], $$[$0], undefined, undefined) 
break;
case 74:
 this.$ = instruccionesAPI.newIf( $$[$0-3], $$[$0-1], undefined, $$[$0]) 
break;
case 75:
 this.$ = instruccionesAPI.newIf( $$[$0-3], $$[$0-1], $$[$0], undefined) 
break;
case 76:
 this.$ = instruccionesAPI.newIf( $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 77:
 this.$ = instruccionesAPI.newElse($$[$0]) 
break;
case 80:
 this.$ = instruccionesAPI.newElseIf($$[$0-2],$$[$0]) 
break;
case 81:
 this.$ =  instruccionesAPI.newSwitch($$[$0-4], $$[$0-1]) 
break;
case 84:
 this.$ = instruccionesAPI.newCase($$[$0-2],$$[$0]) 
break;
case 85:
 this.$ = instruccionesAPI.newCase("default",$$[$0]) 
break;
case 86:
 this.$ = instruccionesAPI.newDo_While($$[$0-2],$$[$0-5]) 
break;
case 87:
 this.$ = instruccionesAPI.newWhile($$[$0-2],$$[$0]) 
break;
case 88: case 90:
 this.$ = instruccionesAPI.newFunction($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 89: case 91: case 92:
 this.$ = instruccionesAPI.newFunction($$[$0-4],$$[$0-3],undefined,$$[$0]) 
break;
case 93:
 $$[$0-3].push(instruccionesAPI.newParam($$[$0-1],$$[$0])); this.$ = $$[$0-3] 
break;
case 94:
 this.$ = [instruccionesAPI.newParam($$[$0-1],$$[$0])] 
break;
case 95:
 this.$ = instruccionesAPI.instructionPrint($$[$0-4],$$[$0-2]) 
break;
case 96:
 instruccionesAPI.newFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 97:
 instruccionesAPI.newFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]) 
break;
case 98:
  $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 100:
 $$[$0-3].push(instruccionesAPI.instructionImport($$[$0-1])); this.$ = $$[$0-3] 
break;
case 101:
this.$ = [instruccionesAPI.instructionImport($$[$0-1])]
break;
case 102:
 this.$ = instruccionesAPI.instructionCallFunction($$[$0-3],$$[$0-1]) 
break;
case 103:
 this.$ = instruccionesAPI.instructionCallFunction($$[$0-2], undefined) 
break;
case 104:
  $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2] 
break;
case 106:
 this.$ = instruccionesAPI.instructionReturn($$[$0-1]) 
break;
case 107:
 this.$ = instruccionesAPI.instructionReturn(undefined) 
break;
case 108:
   errorSintactico = 'Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column; 
            instruccionesAPI.pushError(instruccionesAPI.errorSintactico(errorSintactico)); 
            console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:4,7:3,8:7,9:$V1,90:[1,5]},{1:[3]},{5:9,8:7,9:$V1,90:[1,10]},{5:11,8:7,9:$V1},{6:[1,12],8:13,9:$V1},{10:[1,14]},o([2,9,10,13,21,29,31,43,44,45,46,47,71,76,79,81,82,83,85,87,88,92],[2,108]),o($V2,[2,4]),{10:[1,15]},{6:[1,16],8:13,9:$V1},{10:[1,17]},{6:[1,18],8:13,9:$V1},{1:[2,3]},o($V2,[2,5]),{30:[1,19]},{11:[1,20]},{1:[2,1]},{30:[1,21]},{1:[2,2]},o($V3,[2,101]),{2:$V0,7:28,12:22,13:[1,23],14:24,19:25,20:26,21:$V4,34:29,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,85:$Va},o($V3,[2,100]),{2:$V0,7:28,13:[1,36],14:37,19:25,20:26,21:$V4,34:29,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,85:$Va},o($Vb,[2,7]),o($Vc,[2,9]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),{10:[1,39],35:38,37:40},{10:[1,41],86:[1,42]},{10:[2,43]},{10:[2,44]},{10:[2,45]},{10:[2,46]},{10:[2,47]},o($Vb,[2,6]),o($Vc,[2,8]),{30:[1,43],36:$Vd},o($Ve,$Vf,{38:$Vg,69:[1,45]}),o($Ve,[2,36]),{69:[1,47]},{69:[1,48]},o([2,9,10,13,21,29,31,43,44,45,46,47,48,49,63,64,65,66,67,68,69,71,76,79,81,82,83,85,87,88,92],[2,34]),{10:$Vh,37:49},{34:53,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,70:[1,52],84:51},{10:$Vi,33:64,39:54,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{34:53,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,70:[1,67],84:66},{70:[1,68]},o($Ve,[2,35]),o($Ve,$Vf,{38:$Vg}),{36:$Vs,70:[1,69]},{11:$Vt,15:71},{10:[1,73]},o($Ve,[2,37],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),{10:$Vi,33:64,39:88,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:89,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VI,[2,64]),o($VI,[2,65]),o($VI,[2,66]),o($VI,[2,67]),o($VI,[2,68]),o($VI,[2,69]),o($VI,[2,70],{69:$VJ}),o($VI,[2,71]),{10:$Vi,33:64,39:91,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{36:$Vs,70:[1,92]},{11:$Vt,15:93},{11:$Vt,15:94},{11:$Vt,15:95},{34:96,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9},o($Vc,[2,89]),{2:$V0,7:113,8:108,9:$V1,10:$VK,13:[1,98],16:97,17:99,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},o($VU,[2,94]),{10:$Vi,33:64,39:124,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:125,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:126,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:127,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:128,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:129,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:130,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:131,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:132,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:133,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:134,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:135,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:136,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:137,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VI,[2,48]),o($VI,[2,49]),{10:$Vi,33:64,39:140,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:[1,139],91:138},{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,141]},{11:$Vt,15:142},o($Vc,[2,91]),o($Vc,[2,92]),o($Vc,[2,88]),{10:[1,143]},{2:$V0,7:113,8:108,9:$V1,10:$VK,13:[1,144],17:145,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},o($VV,[2,11]),o($VW,[2,13]),o($VW,[2,20]),o($VW,[2,21]),o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),{30:[1,146]},{30:[1,147]},o($VW,[2,31]),{30:[1,148]},o($VW,[2,33]),{10:$Vh,35:38,37:40},{38:[1,149],41:$VX,42:$VY,69:$VJ},{30:[1,152]},{69:[1,153]},{69:[1,154]},{69:[1,155]},{11:$Vt,15:156},{69:[1,157]},{69:[1,158]},{10:$Vi,30:[1,160],33:64,39:159,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VZ,[2,50],{51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VZ,[2,51],{51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($V_,[2,52],{53:$Vy,54:$Vz}),o($V_,[2,53],{53:$Vy,54:$Vz}),o($VI,[2,54]),o($VI,[2,55]),o($V$,[2,56],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($V$,[2,57],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($V01,[2,58],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,59:$VE,60:$VF,61:$VG,62:$VH}),o($V01,[2,59],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,59:$VE,60:$VF,61:$VG,62:$VH}),o($V11,[2,60],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($V11,[2,61],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($V11,[2,62],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($V11,[2,63],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),{36:[1,162],70:[1,161]},o($VI,[2,103]),o($VU,[2,105],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($VI,[2,72]),o($Vc,[2,90]),o($VU,[2,93]),o($VV,[2,10]),o($VW,[2,12]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,32]),{10:$Vi,33:64,39:163,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($V21,[2,41]),o($V21,[2,42]),o($VW,[2,40]),{10:$Vi,33:64,39:164,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vh,19:165,34:114,35:166,37:40,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9},{10:$Vi,33:64,39:167,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{83:[1,168]},{10:$Vi,33:64,39:169,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{10:$Vi,33:64,39:170,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{30:[1,171],48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH},o($VW,[2,107]),o($VI,[2,102]),{10:$Vi,33:64,39:172,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{30:[1,173],48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH},{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,174]},{10:$Vi,33:64,39:175,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{30:[1,176],36:$Vd},{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,177]},{69:[1,178]},{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,179]},{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,180]},o($VW,[2,106]),o($VU,[2,104],{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH}),o($VW,[2,39]),{11:$Vt,15:181},{30:[1,182],48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH},{10:$Vi,33:64,39:183,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{11:$Vt,15:184},{10:$Vi,33:64,39:185,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{11:[1,186]},{30:[1,187]},o($VW,[2,73],{72:188,73:189,75:191,74:$V31}),{10:$V41,40:193,89:192},{30:[1,195],48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH},o($VW,[2,87]),{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,196]},{77:197,78:198,79:$V51,81:$V61},o($VW,[2,95]),o($VW,[2,74]),o($VW,[2,75],{72:201,75:202,74:$V31}),{11:$Vt,15:203,71:[1,204]},o($V71,[2,79]),{36:$V81,70:[1,205]},o($VU,[2,99]),{41:$VX,42:$VY},{10:$V41,40:193,89:207},{30:[1,208]},{13:[1,209],78:210,79:$V51,81:$V61},o($V91,[2,83]),{10:$Vi,33:64,39:211,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},{80:[1,212]},o($VW,[2,76]),o($V71,[2,78]),o($VW,[2,77]),{69:[1,213]},{11:$Vt,15:214},{10:$V41,40:215},{36:$V81,70:[1,216]},o($VW,[2,86]),o($VW,[2,81]),o($V91,[2,82]),{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,80:[1,217]},{2:$V0,7:113,8:108,9:$V1,10:$VK,11:$Va1,16:220,17:99,18:218,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},{10:$Vi,33:64,39:221,48:$Vj,49:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr},o($VW,[2,96]),o($VU,[2,98]),{11:$Vt,15:222},{2:$V0,7:113,8:108,9:$V1,10:$VK,11:$Va1,16:220,17:99,18:223,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},o($V91,[2,85]),{2:$V0,7:113,8:108,9:$V1,10:$VK,16:224,17:99,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},o($V91,[2,15],{19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,8:108,32:111,33:112,7:113,34:114,40:116,17:145,2:$V0,9:$V1,10:$VK,29:$VL,31:$VM,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT}),{48:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,70:[1,225]},o($VW,[2,97]),o($V91,[2,84]),{2:$V0,7:113,8:108,9:$V1,10:$VK,13:[1,226],17:145,19:100,22:101,23:102,24:103,25:104,26:105,27:106,28:107,29:$VL,31:$VM,32:111,33:112,34:114,40:116,43:$V5,44:$V6,45:$V7,46:$V8,47:$V9,71:$VN,76:$VO,82:$VP,83:$VQ,87:$VR,88:$VS,92:$VT},{11:$Vt,15:227},o($V91,[2,14]),o($V71,[2,80])],
defaultActions: {12:[2,3],16:[2,1],18:[2,2],31:[2,43],32:[2,44],33:[2,45],34:[2,46],35:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
    let errorSintactico = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 43;
break;
case 4:return 44;
break;
case 5:return 47;
break;
case 6:return 45;
break;
case 7:return 46;
break;
case 8:return 30;   
break;
case 9:return 36;      
break;
case 10:return 80;  
break;
case 11:return 41;        
break;
case 12:return 42; 
break;
case 13:return 61;        
break;
case 14:return 59;
break;
case 15:return 62;             
break;
case 16:return 60; 
break;
case 17:return 58;   
break;
case 18:return 57;   
break;
case 19:return 49;
break;
case 20:return 38;   
break;
case 21:return 56;           
break;
case 22:return 55;     
break;
case 23:return 50;
break;
case 24:return 48;  
break;
case 25:return 52;      
break;
case 26:return 51;
break;
case 27:return 54;
break;
case 28:return 53;
break;
case 29:return 69;
break;
case 30:return 70; 
break;
case 31:return 11;     
break;
case 32:return 13;
break;
case 33:return 65;
break;
case 34:return 66;
break;
case 35:return 9;
break;
case 36:return 90;
break;
case 37:return 31;
break;
case 38:return 85;
break;
case 39:return 92;
break;
case 40:return 86;
break;
case 41:return 71;
break;
case 42:return 74;
break;
case 43:return 83;
break;
case 44:return 82;
break;
case 45:return 88;
break;
case 46:return 76;
break;
case 47:return 79;
break;
case 48:return 81;
break;
case 49:return 29;
break;
case 50:return "IMPRIMIR";
break;
case 51:return "IMPRIMIR";
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 54:return 63;
break;
case 55:return 'ENTERO';
break;
case 56:return 10;
break;
case 57:return 6;
break;
case 58: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                       instruccionesAPI.pushError(instruccionesAPI.errorLexico(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));     
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:false\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}