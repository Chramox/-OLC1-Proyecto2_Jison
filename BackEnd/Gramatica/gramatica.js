/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[1,7],$V3=[2,5,87,88],$V4=[87,88],$V5=[1,24],$V6=[1,23],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,26],$Vd=[2,15,17,41,42,43,44,45,81],$Ve=[1,40],$Vf=[18,33],$Vg=[2,36],$Vh=[1,42],$Vi=[1,46],$Vj=[1,49],$Vk=[1,60],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,62],$Vu=[1,70],$Vv=[1,69],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[18,19,33,46,48,49,50,51,52,53,54,55,56,57,58,59,60,76],$VJ=[1,85],$VK=[1,104],$VL=[1,100],$VM=[1,101],$VN=[1,106],$VO=[1,108],$VP=[1,112],$VQ=[1,111],$VR=[1,110],$VS=[1,113],$VT=[1,109],$VU=[1,114],$VV=[19,33],$VW=[2,17,27,28,35,41,42,43,44,45,68,72,75,77,78,79,84,85,87,91],$VX=[1,143],$VY=[1,144],$VZ=[18,19,33,46,48,53,54,55,56,57,58,59,60,76],$V_=[18,19,33,46,48,49,50,53,54,55,56,57,58,59,60,76],$V$=[18,19,33,53,54,76],$V01=[18,19,33,53,54,55,56,76],$V11=[18,19,33,53,54,55,56,57,58,59,60,76],$V21=[2,27],$V31=[18,19,33],$V41=[1,187],$V51=[1,193],$V61=[1,194],$V71=[1,197],$V81=[17,75,77],$V91=[2,72],$Va1=[1,206],$Vb1=[2,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"InstruccionesFueraClase":4,"EOF":5,"Instruccion_OutsideClass":6,"InstruccionesDentroClase":7,"Instruccion_InsideClass":8,"InstruccionesMetodo_Funciones":9,"Instruccion_Functions":10,"Import":11,"Class":12,"Declaracion":13,"FuncionMetodo":14,"Clase":15,"TokEnd":16,"LLAVE_CIERRE":17,"PUNTO_COMA":18,"PARENTESIS_CIERRE":19,"Asignacion":20,"If":21,"For":22,"While":23,"Do":24,"Switch":25,"Imprimir":26,"BREAK":27,"CONTINUE":28,"Return":29,"LlamarFuncion":30,"Tipo_Dato":31,"Declaracion1":32,"COMA":33,"Declaracion2":34,"IDENTIFICADOR":35,"IGUAL":36,"Expresion":37,"Aumento":38,"INCREMENTO":39,"DECREMENTO":40,"INT":41,"CHAR":42,"DOUBLE":43,"BOOLEAN":44,"STRING":45,"RESTA":46,"NOT":47,"SUMA":48,"MULTIPLICACION":49,"DIVISION":50,"MODULO":51,"POTENCIA":52,"AND":53,"OR":54,"DOBLE_IGUAL":55,"DIFERENTEA":56,"MENOR_IGUAL":57,"MENOR":58,"MAYOR_IGUAL":59,"MAYOR":60,"DECIMAL":61,"NUMERO":62,"TRUE":63,"FALSE":64,"CADENA":65,"CARACTER":66,"PARENTESIS_APERTURA":67,"IF":68,"LLAVE_APERTURA":69,"OptionalElse":70,"ELSE":71,"SWITCH":72,"Lista_Case":73,"Case":74,"CASE":75,"DOS_PUNTOS":76,"DEFAULT":77,"DO":78,"WHILE":79,"FuncionPrima":80,"VOID":81,"MAIN":82,"Parametros":83,"IMPRIMIR":84,"FOR":85,"ListaAumentoFor":86,"CLASS":87,"IMPORT":88,"Lista_Exp":89,"Expresiones":90,"RETURN":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"Clase",17:"LLAVE_CIERRE",18:"PUNTO_COMA",19:"PARENTESIS_CIERRE",27:"BREAK",28:"CONTINUE",33:"COMA",35:"IDENTIFICADOR",36:"IGUAL",39:"INCREMENTO",40:"DECREMENTO",41:"INT",42:"CHAR",43:"DOUBLE",44:"BOOLEAN",45:"STRING",46:"RESTA",47:"NOT",48:"SUMA",49:"MULTIPLICACION",50:"DIVISION",51:"MODULO",52:"POTENCIA",53:"AND",54:"OR",55:"DOBLE_IGUAL",56:"DIFERENTEA",57:"MENOR_IGUAL",58:"MENOR",59:"MAYOR_IGUAL",60:"MAYOR",61:"DECIMAL",62:"NUMERO",63:"TRUE",64:"FALSE",65:"CADENA",66:"CARACTER",67:"PARENTESIS_APERTURA",68:"IF",69:"LLAVE_APERTURA",71:"ELSE",72:"SWITCH",75:"CASE",76:"DOS_PUNTOS",77:"DEFAULT",78:"DO",79:"WHILE",81:"VOID",82:"MAIN",84:"IMPRIMIR",85:"FOR",87:"CLASS",88:"IMPORT",91:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[6,2],[6,1],[6,1],[8,1],[8,1],[8,1],[8,1],[16,1],[16,1],[16,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,2],[10,1],[10,2],[10,1],[13,3],[32,3],[32,1],[34,3],[34,1],[20,4],[20,2],[38,2],[38,2],[31,1],[31,1],[31,1],[31,1],[31,1],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[21,8],[70,0],[70,4],[70,9],[25,7],[73,2],[73,1],[74,6],[74,3],[24,9],[23,7],[14,7],[14,7],[14,7],[80,2],[80,1],[83,4],[83,2],[26,5],[22,10],[22,11],[86,3],[86,1],[12,5],[11,4],[11,3],[30,3],[89,2],[89,1],[90,3],[90,1],[29,3],[29,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2: case 4: case 6:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 7:
 this.$ = [$$[$0]]; 
break;
case 10: case 14: case 31:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 32:
this.$ = instruccionesAPI.newDeclaration($$[$0-2],$$[$0-1]); 
break;
case 37:
this.$ = instruccionesAPI.newAsignament($$[$0-3],$$[$0-1]); 
break;
case 48:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 49:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 50:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 51:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 53:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 54:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 55:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 56:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 57:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTEA); 
break;
case 58:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 59:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 60:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 61:
this.$ = instruccionesAPI.newBinaryOperation($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 62:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.NUMERO); 
break;
case 63:
 this.$ = instruccionesAPI.newValue(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 64:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.TRUE); 
break;
case 65:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.FALSE); 
break;
case 66:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.CADENA); 
break;
case 67:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.CARACTER); 
break;
case 68: case 69:
 this.$ = instruccionesAPI.newValue($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 80:
 this.$ = instruccionesAPI.newDo_While($$[$0-2], $$[$0-6]); 
break;
case 81:
 this.$ = instruccionesAPI.newWhile($$[$0-4], $$[$0-1]); 
break;
case 82: case 84:
this.$ = instruccionesAPI.newFunction($$[$0-6], $$[$0-5], $$[$0-1] ); 
break;
case 83:
this.$ = instruccionesAPI.newFunction($$[$0-6], $$[$0-5], $$[$0-1]); 
break;
case 94:
 this.$ = instruccionesAPI.newClass($$[$0-3], $$[$0-1]); 
break;
case 95: case 96:
 this.$ = instruccionesAPI.newImport($$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,11:4,12:5,87:$V1,88:$V2},{1:[3]},{2:$V0,5:[1,9],6:10,11:4,12:5,87:$V1,88:$V2},o($V3,[2,3]),{12:11,87:$V1,88:[1,12]},o($V3,[2,9]),o($V3,[2,10]),{35:[1,13]},{35:[1,14]},{1:[2,1]},o($V3,[2,2]),o($V3,[2,8]),{35:[1,15]},{18:[1,16]},{69:[1,17]},{18:[1,18]},o($V4,[2,96]),{2:$V5,7:19,8:20,13:21,14:22,15:$V6,31:25,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,81:$Vc},o($V4,[2,95]),{2:$V5,8:33,13:21,14:22,15:$V6,17:[1,32],31:25,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,81:$Vc},o($Vd,[2,5]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{32:34,34:36,35:[1,35]},{35:[1,37],82:[1,38]},{35:[2,41]},{35:[2,42]},{35:[2,43]},{35:[2,44]},{35:[2,45]},o([2,5,17,27,28,35,41,42,43,44,45,68,72,75,77,78,79,84,85,87,88,91],[2,94]),o($Vd,[2,4]),{18:[1,39],33:$Ve},o($Vf,$Vg,{36:$Vh,67:[1,41]}),o($Vf,[2,34]),{67:[1,43]},{67:[1,44]},o([2,15,17,27,28,35,41,42,43,44,45,46,47,61,62,63,64,65,66,67,68,72,75,77,78,79,81,84,85,87,91],[2,32]),{34:45,35:$Vi},{19:$Vj,31:50,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,80:47,83:48},{30:61,35:$Vk,37:51,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{19:$Vj,31:50,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,80:63,83:48},{19:[1,64]},o($Vf,[2,33]),o($Vf,$Vg,{36:$Vh}),{69:[1,65]},{19:[1,66],33:[1,67]},{69:[2,86]},{35:[1,68]},o($Vf,[2,35],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),{30:61,35:$Vk,37:83,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:84,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},o($VI,[2,62]),o($VI,[2,63]),o($VI,[2,64]),o($VI,[2,65]),o($VI,[2,66]),o($VI,[2,67]),o($VI,[2,68],{67:$VJ}),o($VI,[2,69]),{30:61,35:$Vk,37:86,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{69:[1,87]},{69:[1,88]},{2:$VK,9:89,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{69:[2,85]},{31:115,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},o($VV,[2,88]),{30:61,35:$Vk,37:116,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:117,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:118,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:119,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:120,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:121,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:122,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:123,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:124,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:125,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:126,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:127,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:128,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:129,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},o($VI,[2,46]),o($VI,[2,47]),{19:[1,132],30:61,35:$Vk,37:133,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,89:130,90:131},{19:[1,134],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{2:$VK,9:135,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,9:136,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,10:138,12:99,13:91,17:[1,137],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($VW,[2,7]),o($VW,[2,18]),o($VW,[2,19]),o($VW,[2,20]),o($VW,[2,21]),o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),{18:[1,139]},{18:[1,140]},o($VW,[2,29]),{18:[1,141]},o($VW,[2,31]),{32:34,34:36,35:$Vi},{36:[1,142],39:$VX,40:$VY,67:$VJ},{18:[1,145]},{67:[1,146]},{67:[1,147]},{67:[1,148]},{69:[1,149]},{67:[1,150]},{67:[1,151]},{18:[1,153],30:61,35:$Vk,37:152,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{35:[1,154]},o($VZ,[2,48],{49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VZ,[2,49],{49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($V_,[2,50],{51:$Vy,52:$Vz}),o($V_,[2,51],{51:$Vy,52:$Vz}),o($VI,[2,52]),o($VI,[2,53]),o($V$,[2,54],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($V$,[2,55],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($V01,[2,56],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,57:$VE,58:$VF,59:$VG,60:$VH}),o($V01,[2,57],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,57:$VE,58:$VF,59:$VG,60:$VH}),o($V11,[2,58],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($V11,[2,59],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($V11,[2,60],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($V11,[2,61],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VI,[2,97]),{19:[1,155],33:[1,156]},o($VI,[2,99]),o($VV,[2,101],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($VI,[2,70]),{2:$VK,10:138,12:99,13:91,17:[1,157],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,10:138,12:99,13:91,17:[1,158],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($Vd,[2,82]),o($VW,[2,6]),o($VW,$V21),o($VW,[2,28]),o($VW,[2,30]),{30:61,35:$Vk,37:159,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},o($V31,[2,39]),o($V31,[2,40]),o($VW,[2,38]),{30:61,35:$Vk,37:160,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{13:161,31:105,32:162,34:36,35:$Vi,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb},{30:61,35:$Vk,37:163,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{2:$VK,9:164,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{30:61,35:$Vk,37:165,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{30:61,35:$Vk,37:166,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{18:[1,167],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},o($VW,[2,103]),o($VV,[2,87]),o($VI,[2,98]),{30:61,35:$Vk,37:168,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},o($Vd,[2,83]),o($Vd,[2,84]),{18:[1,169],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{19:[1,170],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{30:61,35:$Vk,37:171,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{18:[1,172],33:$Ve},{19:[1,173],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{2:$VK,10:138,12:99,13:91,17:[1,174],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{19:[1,175],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{19:[1,176],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},o($VW,[2,102]),o($VV,[2,100],{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($VW,[2,37]),{69:[1,177]},{18:[1,178],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{30:61,35:$Vk,37:179,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{69:[1,180]},{79:[1,181]},{69:[1,182]},{18:[1,183]},{2:$VK,9:184,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{35:$V41,38:186,86:185},{18:[1,188],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},{2:$VK,9:189,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{67:[1,190]},{73:191,74:192,75:$V51,77:$V61},o($VW,[2,89]),{2:$VK,10:138,12:99,13:91,17:[1,195],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{19:[1,196],33:$V71},o($VV,[2,93]),{39:$VX,40:$VY},{35:$V41,38:186,86:198},{2:$VK,10:138,12:99,13:91,17:[1,199],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{30:61,35:$Vk,37:200,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{17:[1,201],74:202,75:$V51,77:$V61},o($V81,[2,77]),{30:61,35:$Vk,37:203,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},{76:[1,204]},o($VW,$V91,{70:205,71:$Va1}),{69:[1,207]},{35:$V41,38:208},{19:[1,209],33:$V71},o($VW,[2,81]),{19:[1,210],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},o($VW,[2,75]),o($V81,[2,76]),{46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,76:[1,211]},{2:$VK,9:212,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($VW,[2,71]),{68:[1,214],69:[1,213]},{2:$VK,9:215,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($VV,[2,92]),{69:[1,216]},{18:[1,217]},{2:$VK,9:218,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($V81,[2,79],{13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,12:99,29:102,30:103,31:105,38:107,10:138,2:$VK,27:$VL,28:$VM,35:$VN,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU}),{2:$VK,9:219,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{67:[1,220]},{2:$VK,10:138,12:99,13:91,17:[1,221],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,9:222,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($VW,[2,80]),{2:$VK,10:138,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:[1,223],28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,10:138,12:99,13:91,17:[1,224],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{30:61,35:$Vk,37:225,46:$Vl,47:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt},o($VW,[2,90]),{2:$VK,10:138,12:99,13:91,17:[1,226],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{18:[1,227]},o($VW,[2,73]),{19:[1,228],46:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH},o($VW,[2,91]),o([2,27,28,35,41,42,43,44,45,68,72,78,79,84,85,87,91],$V21,{17:$Vb1,75:$Vb1,77:$Vb1}),{69:[1,229]},{2:$VK,9:230,10:90,12:99,13:91,20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},{2:$VK,10:138,12:99,13:91,17:[1,231],20:92,21:93,22:94,23:95,24:96,25:97,26:98,27:$VL,28:$VM,29:102,30:103,31:105,35:$VN,38:107,41:$V7,42:$V8,43:$V9,44:$Va,45:$Vb,68:$VO,72:$VP,78:$VQ,79:$VR,84:$VS,85:$VT,87:$V1,91:$VU},o($VW,$V91,{70:232,71:$Va1}),o($VW,[2,74])],
defaultActions: {9:[2,1],27:[2,41],28:[2,42],29:[2,43],30:[2,44],31:[2,45],49:[2,86],66:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./instrucciones').TIPO_DATO; //para jalar el tipo de dato
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 41;
break;
case 4:return 42;
break;
case 5:return 45;
break;
case 6:return 43;
break;
case 7:return 44;
break;
case 8:return 18;   
break;
case 9:return 33;      
break;
case 10:return 76;  
break;
case 11:return 39;        
break;
case 12:return 40; 
break;
case 13:return 59;        
break;
case 14:return 57;
break;
case 15:return 60;             
break;
case 16:return 58; 
break;
case 17:return 56;   
break;
case 18:return 55;   
break;
case 19:return 47;
break;
case 20:return 36;   
break;
case 21:return 54;           
break;
case 22:return 53;     
break;
case 23:return 48;
break;
case 24:return 46;  
break;
case 25:return 50;      
break;
case 26:return 49;
break;
case 27:return 52;
break;
case 28:return 51;
break;
case 29:return 67;
break;
case 30:return 19; 
break;
case 31:return 69;     
break;
case 32:return 17;
break;
case 33:return 63;
break;
case 34:return 64;
break;
case 35:return 87;
break;
case 36:return 88;
break;
case 37:return 28;
break;
case 38:return 81;
break;
case 39:return 91;
break;
case 40:return 82;
break;
case 41:return 68;
break;
case 42:return 71;
break;
case 43:return 79;
break;
case 44:return 78;
break;
case 45:return 85;
break;
case 46:return 72;
break;
case 47:return 75;
break;
case 48:return 77;
break;
case 49:return 27;
break;
case 50:return "IMPRIMIR";
break;
case 51:return "IMPRIMIR";
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 54:return 61;
break;
case 55:return 'ENTERO';
break;
case 56:return 35;
break;
case 57:return 5;
break;
case 58: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:!)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:false\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}